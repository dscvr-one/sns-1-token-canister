type HeaderField = record {
    text;
    text;
};

type HttpRequest = record {
    method: text;
    url: text;
    headers: vec HeaderField;
    body: blob;
};

type HttpResponse = record {
    status_code: nat16;
    headers: vec HeaderField;
    body: blob;
};

type EmptyResult = variant {
    Ok;
    Err: text;
};

type AssetResult = variant {
    Ok: vec nat8;
    Err: text;
}

type ServiceControllerKind = variant {
    Backup;
    Restore;
    Admin;
    Owner;
};

type ServiceController = record {
    kind: ServiceControllerKind;
    controller_id: principal;
    created_at: nat64;
};

service soulbound_token : {
    "test": () -> (text) query;
    http_request: (request: HttpRequest) -> (HttpResponse) query;

    // Asset Management
    add_asset: (asset_name: text, asset: vec nat8) -> (EmptyResult);
    append_asset: (asset_name: text, asset: vec nat8) -> (EmptyResult);
    clear_asset: (asset_name: text) -> ();
    get_asset: (asset_name: text) -> (AssetResult) query;

    // Admin Management
    get_admins: () -> (vec principal) query;
    remove_admin: (principal) -> (EmptyResult);
    add_admin: (principal) -> (EmptyResult);
    get_service_controllers: () -> (vec ServiceController) query;

    // Souldboun Tokenization
    mint: (principal) -> (EmptyResult);
    get_registry: () -> (vec record {principal; vec nat64;} ) query;
    soulbound_tokens: (user: principal) -> (vec nat64) query;

}